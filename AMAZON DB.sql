-- EDA

SELECT * FROM category;
SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * ]]
FROM payments;

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/
-- join oi -- o -- p
-- group by pid
-- total sale
-- top 10

	
-- Creating new column


SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold,
    SUM(oi.quantity * oi.price_per_unit) AS total_sales_value
FROM order_items oi
JOIN products p 
    ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_sales_value DESC
LIMIT 10;

--ADD ON: Top 10 of each categories
WITH ranked_products AS (
    SELECT 
        c.category_name,
        p.product_id,
        p.product_name,
        SUM(oi.quantity) AS total_quantity_sold,
        SUM(oi.quantity * oi.price_per_unit) AS total_sales_value,
        ROW_NUMBER() OVER (
            PARTITION BY c.category_name
            ORDER BY SUM(oi.quantity * oi.price_per_unit) DESC
        ) AS rank_in_category
    FROM order_items oi
    JOIN products p 
        ON oi.product_id = p.product_id
    JOIN category c 
        ON p.category_id = c.category_id
    GROUP BY c.category_name, p.product_id, p.product_name
)
SELECT *
FROM ranked_products
WHERE rank_in_category <= 10
ORDER BY category_name, total_sales_value DESC;


/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

-- category_id, cate_name, total revene, total cotribution 
-- oi -- products -- cate
-- group by cat id and name sum total (oi)

SELECT 
	p.category_id,
	c.category_name,
	SUM(oi.total_sale) as total_sale,
	SUM(oi.total_sale)/
					(SELECT SUM(total_sale) FROM order_items) 
					* 100
	as contribution
FROM order_items as oi
JOIN
products as p
ON p.product_id = oi.product_id
LEFT JOIN category as c
ON c.category_id = p.category_id
GROUP BY 1, 2
ORDER BY 3 DESC


-- 


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

-- o -- oi- cx
-- group by cx id and cx NAME sum(total sale)/no orders

-- cx rahul 2 

-- 1000/2
-- oi 5

SELECT 
	c.customer_id,
	CONCAT(c.first_name, ' ',  c.last_name) as full_name,
	SUM(total_sale)/COUNT(o.order_id) as AOV,
	COUNT(o.order_id) as total_orders --- filter
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
HAVING  COUNT(o.order_id) > 5



/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

-- last 1 year data 
-- each month -- their sale and their prev month sale
-- window lag

SELECT 
	year,
	month,
	total_sale as current_month_sale,
	LAG(total_sale, 1) OVER(ORDER BY year, month) as last_month_sale
FROM ---
(
SELECT 
	EXTRACT(MONTH FROM o.order_date) as month,
	EXTRACT(YEAR FROM o.order_date) as year,
	ROUND(
			SUM(oi.total_sale::numeric)
			,2) as total_sale
FROM orders as o
JOIN
order_items as oi
ON oi.order_id = o.order_id
WHERE
    EXTRACT(YEAR FROM o.order_date) IN (2023, 2024)
    AND o.order_date >= CURRENT_DATE - INTERVAL '2 year'
GROUP BY 1, 2
ORDER BY year, month
) as t1

------
SELECT
    EXTRACT(YEAR FROM o.order_date) AS sales_year,
    EXTRACT(MONTH FROM o.order_date) AS month_number,
    TO_CHAR(o.order_date, 'Mon') AS month_name,
    SUM(oi.total_sale) AS total_sales
FROM
    Orders o
JOIN
    Order_Items oi ON o.order_id = o.order_id
WHERE
    EXTRACT(YEAR FROM o.order_date) IN (2022, 2023)
GROUP BY
    sales_year, month_number, month_name
ORDER BY
    total_sales DESC;
CREATE TABLE monthly_sales_summary AS
SELECT
    -- Extract the year from the order date (e.g., 2022)
    EXTRACT(YEAR FROM o.order_date) AS sales_year,

    -- Extract the month number for correct sorting (e.g., 1 for January)
    EXTRACT(MONTH FROM o.order_date) AS month_number,

    -- Get the three-letter month name for the chart axis (e.g., 'Jan')
    TO_CHAR(o.order_date, 'Mon') AS month_name,

    -- Calculate the sum of sales for the month
    SUM(oi.total_sale) AS total_sales
FROM
    Orders o
JOIN
    Order_Items oi ON o.order_id = oi.order_id
WHERE
    -- Filter for only the years we need for the chart
    EXTRACT(YEAR FROM o.order_date) IN (2022, 2023)
GROUP BY
    sales_year, month_number, month_name
ORDER BY
    sales_year, month_number;

SELECT * FROM monthly_sales_summary

/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

-- Approach 1
SELECT *
	-- reg_date - CURRENT_DATE
FROM customers
WHERE customer_id NOT IN (SELECT 
					DISTINCT customer_id
				FROM orders
				);

-- Approach 2
SELECT *
FROM customers as c
LEFT JOIN
orders as o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL

-- 

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

WITH ranking_table
AS
(
SELECT 
	c.state,
	cat.category_name,
	SUM(oi.total_sale) as total_sale,
	RANK() OVER(PARTITION BY c.state ORDER BY SUM(oi.total_sale) ASC) as rank
FROM orders as o
JOIN 
customers as c
ON o.customer_id = c.customer_id
JOIN
order_items as oi
ON o.order_id = oi. order_id
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN
category as cat
ON cat.category_id = p.category_id
GROUP BY 1, 2
)
SELECT 
*
FROM ranking_table
WHERE rank = 1


/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/
-- cx - o - oi
-- cx id group by sum(total_sale)
-- order by total sale
-- rank
-- cx - o - oi
-- cx id group by sum(total_sale)
-- order by total sale 
-- rank 


SELECT 
	c.customer_id,
	CONCAT(c.first_name, ' ',  c.last_name) as full_name,
	SUM(total_sale) as CLTV,
	DENSE_RANK() OVER( ORDER BY SUM(total_sale) DESC) as cx_ranking
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2


/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
	i.inventory_id,
	p.product_name,
	i.stock as current_stock_left,
	i.last_stock_date,
	i.warehouse_id
FROM inventory as i
join 
products as p
ON p.product_id = i.product_id
WHERE stock < 10



/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

-- cx -- o-- ship

SELECT 
	c.*,
	o.*,
	s.shipping_providers,
s.shipping_date - o.order_date as days_took_to_ship
FROM orders as o
JOIN
customers as c
ON c.customer_id = o.customer_id
JOIN 
shipping AS s
ON o.order_id = s.order_id
WHERE s.shipping_date - o.order_date > 3





/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
	p.payment_status,
	COUNT(*) as total_cnt,
	COUNT(*)::numeric/(SELECT COUNT(*) FROM payments)::numeric * 100 AS percentage_of_successful_payments
FROM orders as o
JOIN
payments as p
ON o.order_id = p.order_id
GROUP BY 1


-- 



/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/


WITH top_sellers
AS
(SELECT 
	s.seller_id,
	s.seller_name,
	SUM(oi.total_sale) as total_sale
FROM orders as o
JOIN
sellers as s
ON o.seller_id = s.seller_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 5
),

sellers_reports
AS
(SELECT 
	o.seller_id,
	ts.seller_name,
	o.order_status,
	COUNT(*) as total_orders
FROM orders as o
JOIN 
top_sellers as ts
ON ts.seller_id = o.seller_id
WHERE 
	o.order_status NOT IN ('Inprogress', 'Returned')
	
GROUP BY 1, 2, 3
)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_orders,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	SUM(total_orders)::numeric * 100 as successful_orders_percentage
	
FROM sellers_reports
GROUP BY 1, 2

-- 




/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- o - oi - prod
-- group pid sum(total_sale - cogs * qty) as profit

SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	-- SUM(total_sale - (p.cogs * oi.quantity)) as profit,
	SUM(total_sale - (p.cogs * oi.quantity))/sum(total_sale) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1




/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/


SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/COUNT(*)::numeric * 100 as return_percentage
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1, 2
ORDER BY 5 DESC
------ ADD ON: BY category
SELECT
    c.category_name,
    -- Calculate total units sold by summing the quantity from each order line.
    SUM(oi.quantity) AS total_units_sold,
    -- Sum the quantity of items ONLY from orders marked as 'Returned'.
    SUM(CASE WHEN o.order_status = 'Returned' THEN oi.quantity ELSE 0 END) AS total_units_returned,
    -- Calculate the return rate based on units.
    -- The ::numeric cast ensures accurate decimal division.
    SUM(CASE WHEN o.order_status = 'Returned' THEN oi.quantity ELSE 0 END)::numeric
    / SUM(oi.quantity)::numeric AS return_rate
FROM
    order_items AS oi
JOIN
    orders AS o ON oi.order_id = o.order_id
JOIN
    products AS p ON oi.product_id = p.product_id
JOIN
    category AS c ON p.category_id = c.category_id
GROUP BY
    c.category_name
ORDER BY
    return_rate DESC;


/*
15. Inactive Sellers
Identify sellers who haven’t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

-APPROACH 1
SELECT 
    s.seller_id,
    s.seller_name,
    MAX(o.order_date) AS last_sale_date,
    MAX(oi.total_sale) AS last_sale_amount
FROM sellers AS s
LEFT JOIN orders AS o 
    ON s.seller_id = o.seller_id
LEFT JOIN order_items AS oi 
    ON o.order_id = oi.order_id
GROUP BY s.seller_id, s.seller_name
HAVING MAX(o.order_date) < (CURRENT_DATE - INTERVAL '6 MONTH')
    OR MAX(o.order_date) IS NULL;

-- APPROACH 2
WITH unactive_sellers AS (
    SELECT 
        *
    FROM sellers
    WHERE seller_id NOT IN (
        SELECT seller_id 
        FROM orders 
        WHERE order_date > CURRENT_DATE - INTERVAL '6 MONTH'
    )
)
SELECT 
    us.seller_id,
    us.seller_name,
    MAX(o.order_date) AS last_sale_date,
    MAX(oi.total_sale) AS last_sale_amount
FROM unactive_sellers AS us
LEFT JOIN orders AS o 
    ON us.seller_id = o.seller_id
LEFT JOIN order_items AS oi 
    ON o.order_id = oi.order_id
GROUP BY us.seller_id, us.seller_name;

-----ADD ON:
CREATE OR REPLACE VIEW powerbi_top_performing_sellers AS
WITH seller_stats AS (
    SELECT 
        s.seller_id,
        s.seller_name,
        COUNT(DISTINCT o.order_id) as total_orders,
        SUM(CASE WHEN p.payment_status = 'success' THEN oi.quantity * oi.price_per_unit ELSE 0 END) as successful_sales,
        SUM(oi.quantity * oi.price_per_unit) as total_sales_value,
        COUNT(CASE WHEN p.payment_status = 'success' THEN 1 END) as successful_payments,
        COUNT(p.payment_id) as total_payments
    FROM order_items oi
    JOIN orders o ON oi.order_id = o.order_id
    JOIN payments p ON o.order_id = p.order_id
    JOIN sellers s ON o.seller_id = s.seller_id
    GROUP BY s.seller_id, s.seller_name
)
SELECT 
    seller_id,
    seller_name,
    total_orders,
    total_sales_value,
    successful_sales,
    ROUND((successful_payments * 100.0 / NULLIF(total_payments, 0)), 2) as success_rate_percentage
FROM seller_stats
ORDER BY total_sales_value DESC;

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

SELECT 
c_full_name as customers,
total_orders,
total_return,
CASE
	WHEN total_return > 5 THEN 'Returning_customers' ELSE 'New'
END as cx_category
FROM
(SELECT 
	CONCAT(c.first_name, ' ', c.last_name) as c_full_name,
	COUNT(o.order_id) as total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_return	
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1
)

/*
17. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

SELECT 
*
FROM
(
SELECT 
 	c.customer_id,
 	c.state,
	CONCAT(c.first_name, ' ', c.last_name) as customers,
 	COUNT(o.order_id) AS total_orders,
 	SUM(oi.total_sale) as total_sale,
 	RANK() OVER(PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC) as rank
FROM orders as o
JOIN 
customers as c
ON c.customer_id = o.customer_id
JOIN
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1,2, 3)
WHERE rank <= 5

/*
18. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/
-- s-o-oi
--total_revenue-total_orders-avg_delivery_time
SELECT 
	s.shipping_providers,
	SUM(oi.total_sale) as total_revenue,
	COUNT(o.order_id) AS total_orders,
	AVG(s.shipping_date - o.order_date) AS avg_delivery_time
FROM orders as o
JOIN 
shipping as s
ON s.order_id = o.order_id
JOIN
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1


---------- ADD ON: Customer segmentation based on recency, frequency of orders, and amount of orders.
WITH RfmBase AS (
    -- Step 1: Calculate the raw Recency, Frequency, and Monetary values for each customer.
    SELECT
        c.customer_id,
        CONCAT(c.first_name, ' ', c.last_name) as customer_name,
        -- Recency: Days since the last purchase from today's date.
        (CURRENT_DATE - MAX(o.order_date)) AS recency,
        -- Frequency: Total count of distinct orders.
        COUNT(DISTINCT o.order_id) AS frequency,
        -- Monetary: Total sum of all purchases.
        SUM(oi.total_sale) AS monetary
    FROM
        Customers AS c
    JOIN
        Orders AS o ON c.customer_id = o.customer_id
    JOIN
        Order_Items AS oi ON o.order_id = oi.order_id
    GROUP BY
        c.customer_id, customer_name
),
RfmScores AS (
    -- Step 2: Score each customer from 1 to 5 for each RFM value.
    SELECT
        customer_id,
        customer_name,
        recency,
        frequency,
        monetary,
        -- Recency score: A lower recency (fewer days ago) is better, so it gets a higher score.
        NTILE(5) OVER (ORDER BY recency ASC) AS r_score,
        -- Frequency score: A higher frequency is better.
        NTILE(5) OVER (ORDER BY frequency DESC) AS f_score,
        -- Monetary score: A higher monetary value is better.
        NTILE(5) OVER (ORDER BY monetary DESC) AS m_score
    FROM
        RfmBase
)
-- Step 3: Combine scores and assign a descriptive segment name.
SELECT
    customer_id,
    customer_name,
    recency,
    frequency,
    monetary,
    r_score,
    f_score,
    m_score,
    -- Combine the scores into a single string for easy reference.
    r_score::text || f_score::text || m_score::text AS rfm_score,
    -- Use a CASE statement to assign a meaningful segment based on the scores.
    CASE
        WHEN r_score >= 4 AND f_score >= 4 THEN 'Champions'
        WHEN r_score >= 3 AND f_score >= 3 THEN 'Loyal Customers'
        WHEN r_score >= 4 THEN 'Recent Customers'
        WHEN r_score <= 2 AND f_score >= 4 THEN 'At-Risk Champions'
        WHEN r_score <= 2 AND f_score >= 2 THEN 'At-Risk Customers'
        WHEN r_score <= 2 AND f_score <= 2 THEN 'Hibernating'
        WHEN r_score = 1 THEN 'Lost'
        ELSE 'Other'
    END AS rfm_segment
FROM
    RfmScores
ORDER BY
    monetary DESC;
--------------- ADD ON: days between orders
SELECT
  customer_id,
  order_date,
  COALESCE(
    order_date - LAG(order_date, 1) OVER (PARTITION BY customer_id ORDER BY order_date),
    0
  ) AS days_between_orders
FROM
  Orders;
/*
19. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result
Note: Decrease ratio = cr-ls/ls* 100 (cr = current_year ls=last_year)
*/
-- o-oi-p
--filter 2022
--group by p_id sum(total_sale)

-- o-oi-p
--filter 2023
--group by p_id sum(total_sale)

--join 1,2
WITH revenue_2022 AS
(
SELECT
	p.product_id,
	p.product_name,
	SUM(oi.total_sale) AS revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2022
GROUP BY 1, 2),

revenue_2023 AS
(
SELECT
	p.product_id,
	p.product_name,
	SUM(oi.total_sale) AS revenue
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
products as p
ON 
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY 1, 2)

SELECT
	r2.product_id,
	r2.product_name,
	r2.revenue AS revenue_2022,
	r3.revenue AS revenue_2023,
	(r3.revenue-r2.revenue)/r2.revenue*100 AS decrease_ratio
FROM revenue_2022 AS r2
JOIN revenue_2023 AS r3
ON r2.product_id=r3.product_id
WHERE 
	r2.revenue > r3.revenue
ORDER BY decrease_ratio ASC
LIMIT 10

/*Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
SELECT  * FROM products
--product_id 1 -- airpods 3rg gen -- 55 stock
--product_id 2 -- airpod max -- 39 stock

SELECT * FROM inventory;
SELCT * FROM orders;
SELECT * FROM order_items;
order_id,
order_date,
customer_id,
seller_id,
order_item_id,
product_id,
quantity,

---
CREATE OR REPLACE PROCEDURE add_sales
(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)

LANGUAGE plpgsql
AS $$

DECLARE
--variables
v_count INT;
v_price FLOAT;
v_product_name VARCHAR(50);

BEGIN
--checking stock and product availability in inventory
SELECT price, product_name
FROM 
products 
INTO v_price, v_product_name
WHERE product_id=p_quantity;
SELECT 
	COUNT(*)
	INTO
	v_count
FROM inventory
WHERE 
	product_id=p_product_id
	AND 
	stock >= p_quantity;
	
IF v_count>0 THEN
--add into orders and order_items table
--update inventory
	INSERT INTO orders(order_id, order_date, customer_id, seller_id)
	VALUES
	(p_order_id, CURRENT_DATE, p_customer_id, p_seller_id);
--adding into tables
	INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price_per_unit, total_sale)
	VALUES
	(p_order_item_id, p_order_id, p_product_id, p_quantity, v_price, v_price*p_quantity);
--updating inventory
	UPDATE inventory
	SET stock = stock - p_quantity
	WHERE product_id = p_product_id;

	RAISE NOTICE 'Thank you, product: % sale has been added, also inventory stock updates',v_product_name;

ELSE
	RAISE NOTICE 'Thank you for your information, product: % is not available',v_product_name;
END IF;

END
$$
-----
CALL add_sales
(
25000, 2, 5, 25001, 1,40
)


(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)

